import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import clsx from "clsx";
import Head from "next/head";
import { useState } from "react";
import { FormGroup } from "~/component/FormGroup";
import { Button } from "~/component/Button";
import { Input } from "~/component/Input";
import { api } from "~/utils/api";
import Image from "next/image";
import { useBuyCredits } from "~/hooks/useBuyCredits";

const colors = [
  "blue",
  "red",
  "green",
  "white",
  "black",
  "orange",
  "grey",
  "purple",
];

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({ prompt: "", color: "" });
  const [imageUrl, setImageUrl] = useState("");

  const { buyCredits } = useBuyCredits();

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      console.log("mutation succes", data.imageUrl);
      if (!data.imageUrl) {
        return;
      }
      setImageUrl(data.imageUrl);
    },
  });

  const session = useSession();

  const isLoggedin = !!session.data;

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    //todo submit form to backend
    generateIcon.mutate(form);
    // setForm((prev) => ({ ...prev, prompt: "" }));
  }

  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value,
      }));
    };
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-24 flex min-h-screen flex-col gap-4">
        <h1 className="text-4xl">Generate your icons.</h1>
        <p className="mb-12 text-2xl">
          Fill out the form to start genearting your icons.
        </p>
        {isLoggedin && <></>}

        <form className=" flex flex-col gap-4" onSubmit={handleFormSubmit}>
          <h2 className="text-xl">1. Describe what you want in your icon.</h2>
          <FormGroup>
            <label>Prompt</label>
            <Input value={form.prompt} onChange={updateForm("prompt")}></Input>
          </FormGroup>
          <h2 className="text-xl">2. Pick your icon color.</h2>
          <FormGroup className="mb-12 grid grid-cols-4">
            {colors.map((color) => (
              <label key={color} className="flex gap-2 text-2xl">
                <input
                  type="radio"
                  name="color"
                  checked={color === form.color}
                  onChange={() => setForm((prev) => ({ ...prev, color }))}
                ></input>
                {color}
              </label>
            ))}
          </FormGroup>

          <Button
            isLoading={generateIcon.isLoading}
            disabled={generateIcon.isLoading}
            className="rounded  disabled:bg-gray-600"
          >
            Submit
          </Button>
        </form>
        {imageUrl && (
          <>
            <h2 className="text-xl">Your icons.</h2>
            <section className="gid mb-12 grid-cols-4 gap-4">
              <Image
                src={imageUrl}
                alt="An image of your generated prompt."
                width="300"
                height="300"
              />
            </section>
          </>
        )}
      </main>
    </>
  );
};

export default GeneratePage;
